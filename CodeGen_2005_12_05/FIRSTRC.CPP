//first.cpp
#include "firstrc.h"

//constants
const int iDriveMode=0; //1= 1 motor drives each side (2 motors total)
                        //2 = 2 motors drives each side (4 motors total)

//match drive motors with pwm values 1 thorugh 16
int giLMotor1 = 13;   //pwm numbers corresponding to motors
int giLMotor2 = 14; 
int giRMotor1 = 15;
int giRMotor2 = 16;

//default is that a motor goes max fwd at 255                       
int giLMotor1Fwd = 1; //1 = Max FWD is 255 -1 = Max FWD is 0
int giLMotor2Fwd = 1;
int giRMotor1Fwd = 1;
int giRMotor2Fwd = 1;     

float gfTime = 15.1234f;

using namespace std;

void DrawTitle(void){
  setColor(15,1);  //clears background to dark blue
  system("cls");  
  DrawBoxDouble(1,1,4,80);
  setColor(14,1); //yellow
  posCursor(2, 14);
  cout << "<<< FRC Team 342 Autonomous Code Generator v0.1 >>>";
  setColor(11,1); //cyan
  posCursor(3,20);
  cout << "Written by Chuck Bolin, December 2005";
}

void DrawLabels(void){
  
  setColor(15,1); //border color
  DrawBoxDouble(5,1,45,80);
  setColor(14,1); //label color

  //initial labels
  posCursor(7,5); cout << "Autonomous Max Time (seconds):";
  posCursor(8,5); cout << "Left Motor 1 (pwm 1 - 16):    ";
  posCursor(9,5); cout << "Left Motor 2 (pwm 1 - 16):    ";
  posCursor(10,5); cout << "Right Motor 1 (pwm 1 - 16):   ";
  posCursor(11,5); cout << "Right Motor 2 (pwm 1 - 16):   ";
  
  //program values
  setColor(15,1);
  posCursor(13,10);cout << "Start               Stop";
  posCursor(14,10);cout << "Time      Command   Time      Speed";
  
  for(int i=15;i<35;i++){
    posCursor(i,4); cout << i-14 << ":";  
    
  }
  
}

void DrawValues(void){
  setColor(10,1); cout << fixed; cout << setprecision(2);
  posCursor(7,40); cout << gfTime;
  posCursor(8,40); cout << giLMotor1;
  posCursor(9,40); cout << giLMotor2;
  posCursor(10,40); cout << giRMotor1;
  posCursor(11,40); cout << giRMotor2;
  
}

void DrawInstructions(void){
  setColor(15,1); //border color
  DrawBoxDouble(6,50,30,29);
  setColor(14,1); //label color
  posCursor(7,59); cout << "Instructions";
  setColor(15,1);
  posCursor(9,52);cout << "ESC - Quit Program";
  
  
}

void PrintToFile(void){
	ofstream SaveFile("autogen.txt");

  SaveFile << "/*************************************************" << endl;
  SaveFile << "** Autnomous code generated by FRC Team 342     **" << endl;
  SaveFile << "** Autonomous Code Generator v0.1, Dec. 2005    **" << endl;	
  SaveFile << "*************************************************/" << endl;
  SaveFile << "void User_Autonomous_Code(void){" << endl;
  SaveFile << "//AutoCodeGen variable declarations" << endl << endl;
  SaveFile << "// Initialize all PWMs and Relays" << endl;
  SaveFile << "  pwm01 = pwm02 = pwm03 = pwm04 = pwm05 = pwm06 = pwm07 = pwm08 = 127;" << endl;
  SaveFile << "  pwm09 = pwm10 = pwm11 = pwm12 = pwm13 = pwm14 = pwm15 = pwm16 = 127;" << endl;
  SaveFile << "  relay1_fwd = relay1_rev = relay2_fwd = relay2_rev = 0;" << endl;
  SaveFile << "  relay3_fwd = relay3_rev = relay4_fwd = relay4_rev = 0;" << endl;
  SaveFile << "  relay5_fwd = relay5_rev = relay6_fwd = relay6_rev = 0;" << endl;
  SaveFile << "  relay7_fwd = relay7_rev = relay8_fwd = relay8_rev = 0;"  << endl;
  SaveFile << "  while (autonomous_mode)   // DO NOT CHANGE! " << endl;
  SaveFile << "  {" << endl;
  SaveFile << "    if (statusflag.NEW_SPI_DATA)      // 26.2ms loop area " << endl;
  SaveFile << "   {" << endl;
  SaveFile << "      Getdata(&rxdata);  // DO NOT DELETE" << endl<<endl;
  SaveFile << "      //Auto Generated code here" << endl << endl;
  SaveFile << "      Putdata(&txdata);  // DO NOT DELETE, or you will get no PWM outputs! " << endl;
  SaveFile << "    }" << endl;
  SaveFile << "  }" << endl;
  SaveFile << "}" << endl;
	SaveFile.close();
}

void PrintTimeDate(void){
  struct tm *newtime;
  time_t aclock;
  time(&aclock );   // Get time in seconds
  newtime = localtime( &aclock );   // Convert time to struct tm form 

  /* Print local time as a string */
  //printf( "Current date and time: %s\n", asctime( newtime ) );
  cout << asctime(newtime);  
  
}
